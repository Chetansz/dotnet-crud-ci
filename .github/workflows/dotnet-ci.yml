name: Full CI Pipeline

on: [push, pull_request]

jobs:
  ci-pipeline:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up .NET SDK
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Verify Docker Compose
        run: |
          # Verify Docker Compose v2 is available
          docker compose version
          if [ $? -ne 0 ]; then
            echo "Docker Compose not found. Exiting."
            exit 1
          fi

      - name: Start Docker services
        run: |
          docker compose up -d
          echo "Waiting for API to be healthy..."
          for i in {1..10}; do
            if curl -s http://localhost:8080; then
              echo "API is up!"
              break
            else
              echo "Waiting for API..."
              sleep 5
            fi
          done

      - name: Run SonarQube Scanner (SAST)
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          SONAR_HOST_URL: ${{ secrets.SONAR_HOST_URL }}
        run: |
          dotnet tool install --global dotnet-sonarscanner
          dotnet sonarscanner begin \
            /k:"dotnet-crud-api" \
            /d:sonar.host.url="$SONAR_HOST_URL" \
            /d:sonar.token="$SONAR_TOKEN" \
            /d:sonar.cs.opencover.reportsPaths="coverage.xml"
          dotnet build
          dotnet sonarscanner end /d:sonar.token="$SONAR_TOKEN"

      - name: Run ZAP Scan (DAST)
        run: |
          # Get the Docker network (based on project directory)
          NETWORK=$(docker network ls --filter "name=dotnetcrudapi" -q | head -n 1)
          if [ -z "$NETWORK" ]; then
            NETWORK=$(docker network ls --filter "name=default" -q | head -n 1)
          fi
          docker run --rm -v $(pwd):/zap/wrk/:rw --network "$NETWORK" zaproxy/zap-stable zap-baseline.py -t http://api:8080 -r zap-report.html
          mv zap-report.html zap-report-${{ github.run_id }}.html
          echo "ZAP report generated: zap-report-${{ github.run_id }}.html"

      - name: Run xUnit Tests (Functional)
        run: |
          dotnet test --no-build --verbosity normal

      - name: Archive Artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports
          path: |
            zap-report-*.html
            coverage.xml

      - name: Stop Docker services
        if: always()
        run: |
          docker compose down
